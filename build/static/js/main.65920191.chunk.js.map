{"version":3,"sources":["component/WeekDay.tsx","component/Month.tsx","component/StringInput.tsx","utils.tsx","inputSlice.tsx","pages/index.tsx","App.tsx","serviceWorker.js","store.tsx","index.tsx"],"names":["WeekDay","props","React","createElement","className","concat","color","value","getDate","Month","_useState","useState","_useState2","_slicedToArray","days","setDays","_useState3","_useState4","startGap","setStartGaps","useEffect","dt","Date","year","month","curDate","getFullYear","getMonth","endDate","updated","dayofweek","getDay","push","setDate","Array","fill","map","it","idx","key","SingleInput","binValue","setBinValue","chr","code","toUpperCase","charCodeAt","toString","padStart","Error","CharToBin","Object","assign","type","defaultValue","onKeyDown","e","keyCode","target","onDelete","onChange","onKeyPress","charAt","onFocus","select","attr","StringInput","cursorPos","setCursorPos","_useState5","_useState6","inputText","setInputText","inputChange","_toConsumableArray","length","splice","autoFocus","counterSlice","createSlice","name","initialState","reducers","setValue","state","action","payload","actions","IndexPage","dispatch","useDispatch","Fragment","App","Boolean","window","location","hostname","match","store","configureStore","reducer","counterReducer","ReactDOM","render","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65920191.chunk.js","sourcesContent":["export default function WeekDay(props:{\r\n    value: Date,\r\n    color: string | undefined\r\n}){\r\n    return (\r\n        <div className={`day ${props.color}`}>\r\n            <div className='sqr'></div>\r\n            <div className='ct'>\r\n                {props.value.getDate()}\r\n            </div>\r\n        </div>\r\n    )\r\n}","\r\nimport { useEffect, useState } from 'react';\r\nimport WeekDay from './WeekDay';\r\n\r\nexport default function Month(props:{\r\n    month: number,\r\n    year: number\r\n}){\r\n\r\n    const montNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n    const [days, setDays] = useState<Date[]>([]);\r\n    const [startGap, setStartGaps] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n        const dt = new Date(props.year, props.month-1,1);\r\n        const curDate = new Date(dt.getFullYear(), dt.getMonth(), 1);\r\n        const endDate = new Date(dt.getFullYear(), dt.getMonth() + 1, 1);\r\n        const updated:Date[] = [];\r\n        const dayofweek = curDate.getDay();\r\n        setStartGaps(dayofweek);\r\n        while (curDate < endDate) {\r\n            updated.push(new Date(curDate));\r\n\t\t\tcurDate.setDate(curDate.getDate() + 1);\r\n\t\t}\r\n        setDays(updated);\r\n    }, [props.month, props.year]);\r\n\r\n    return (\r\n        <div className='month'>\r\n            <h5>{montNames[props.month-1]}</h5>\r\n            <div className='dname'>\r\n                <div className='nm'>Sun</div>\r\n                <div className='nm'>Mon</div>\r\n                <div className='nm'>Tue</div>\r\n                <div className='nm'>Wed</div>\r\n                <div className='nm'>Thu</div>\r\n                <div className='nm'>Fri</div>\r\n                <div className='nm'>Sat</div>\r\n            </div>\r\n            <div className='days'>\r\n                {Array(startGap).fill(0).map((it,idx)=><div className={`day blank`} key={`weekb-${idx}`}></div>)}\r\n                {days.map((it:Date, idx) => <WeekDay value={it} color=''  key={`week-${idx}`}/> )}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useEffect, useState } from 'react';\r\nimport {CharToBin} from '../utils';\r\n\r\nfunction SingleInput(props:{\r\n    value: string,\r\n    onKeyPress: (value: string)=>void,\r\n    onDelete: () => void,\r\n    attr: any | undefined,\r\n}){\r\n\r\n    const [binValue, setBinValue] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        setBinValue(CharToBin(props.value));\r\n     }, [props.value]);\r\n\r\n    const onFocus =(e) =>{\r\n        e.target.select();\r\n    }\r\n\r\n    const onKeyDown =(e) =>{\r\n        const code = e.keyCode;\r\n        const value = e.target.value.toUpperCase();\r\n        if(code == 8 && value == ''){\r\n            props.onDelete();\r\n            return false;\r\n        }\r\n    }\r\n    const onChange =(e) =>{\r\n        const value = e.target.value.toUpperCase();\r\n        if(value == ''){\r\n            props.onDelete();\r\n            return false;\r\n        }else{\r\n            props.onKeyPress(value.charAt(0));\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"char\">\r\n            <input type=\"text\" \r\n                defaultValue={props.value} \r\n                onKeyDown={onKeyDown}\r\n                onChange={onChange} \r\n                onFocus={onFocus} {...props.attr}/>\r\n            <div className='AsciiToBin'>\r\n                {binValue}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function StringInput(props: {\r\n    onChange: (value: string[]) => void\r\n}) {\r\n\r\n    const [cursorPos, setCursorPos] = useState<number>(0);\r\n    const [inputText, setInputText] = useState<string[]>([]);\r\n\r\n    const inputChange = (idx, value)=>{\r\n        const updated = [...inputText];\r\n        if(idx>inputText.length){\r\n            updated.push(value);\r\n            setInputText(updated);\r\n        }else{\r\n            updated[idx] = value;\r\n            setInputText(updated);\r\n        }\r\n        setCursorPos(idx+1)\r\n        props.onChange(updated);\r\n    }\r\n    const onDelete = (idx) =>{\r\n        const updated = [...inputText];\r\n        updated.splice(idx,1);\r\n        setInputText(updated);\r\n        setCursorPos(updated.length);\r\n    }\r\n\r\n    return (\r\n        <div className=\"inputText\">\r\n            {inputText.map((it,idx)=> <SingleInput \r\n                 attr={cursorPos==idx? {'autoFocus':'autoFocus'}:''} \r\n                 value={it} \r\n                 onKeyPress={(e) => inputChange(idx,e)} \r\n                 onDelete={() => onDelete(idx)}\r\n                 key={`char-${idx}`}/>\r\n            )}\r\n            <SingleInput \r\n                attr={cursorPos==inputText.length? {'autoFocus':'autoFocus'}:''} \r\n                value='' \r\n                onKeyPress={(e) => inputChange(inputText.length,e)}\r\n                onDelete={() => onDelete(inputText.length-1)}\r\n                key={`char-${inputText.length}`}\r\n                />\r\n        </div>\r\n    );\r\n}","export function CharToBin(chr:string){\r\n    if(chr == '') return '';\r\n    const code = chr.toUpperCase().charCodeAt(0);\r\n    if(code>64){\r\n        return (code-64).toString(2).padStart(5, '0');\r\n    }else{\r\n        throw Error(code+' not in range');\r\n    }\r\n}\r\n\r\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport interface CounterState {\r\n  value: string[]\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: [],\r\n}\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    setValue: (state, action) => {\r\n      state.value =  action.payload ;\r\n    },\r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { setValue } = counterSlice.actions\r\n\r\nexport default counterSlice.reducer","\r\n//import { useDispatch, useSelector } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport Month from '../component/Month';\r\nimport StringInput from '../component/StringInput';\r\nimport { setValue } from '../inputSlice';\r\n//import type { RootState } from '../store';\r\n\r\nexport default function IndexPage() {\r\n    const dispatch = useDispatch();\r\n\r\n    //const inputText = useSelector((state: RootState) => state.inputText.value)\r\n\r\n    const onInputChange =(value:string[])=>{\r\n        dispatch(setValue(value));\r\n    }\r\n    return (\r\n        \r\n    <>\r\n        <div className=\"input\">\r\n            <StringInput onChange={onInputChange}/>\r\n        </div>\r\n        <div className='months'>\r\n            <Month month={6} year={2023}/>\r\n            <Month month={7} year={2023}/>\r\n        </div>\r\n    </>\r\n    );\r\n}","import './App.css';\r\nimport IndexPage from './pages/index';\r\n\r\nexport default function App(){\r\n    return (\r\n      <div className=\"App\">\r\n        <IndexPage />\r\n      </div>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport counterReducer from './inputSlice'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    inputText: counterReducer,\r\n  },\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch","import * as React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>\r\n    , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}